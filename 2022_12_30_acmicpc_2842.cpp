#include <iostream>

using namespace std;

/**
 * Problem
 *      원형의 색상환이 주어진다.
 *      4 <= N <= 1000  : 색의 총 갯수
 *      1 <= K <= N     : 선택할 색의 수
 * 
 *      색을 선택할 떄는 인접한 색상을 골라서는 안된다.
 * 
 *      K 개 선택에 대한 경우의 수를 1,000,000,003 으로 나눈 나머지를 출력하자
 * 
 * Ideas
 *      N 이 1 늘어날 떄를 보자.
 *      이 떄 비집고 들어가는 곳 양옆의 색은 경우의 수들에서 (T, F) (F, F) (F, T) 세가지 경우가 있다.
 *      [T: 선택됨, F: 선택 안됨]
 *      새로 들어온 색이 선택될 수 있는 경우는 오직 (F, F) 일 때 뿐이다.
 *      새로 들어온 색을 선택한다는 것은 기존 색 중에 1개를 대체한다는 뜻이므로, (T, F) + (F, F) * K + (F, T) 이 경우의 수가된다.
 * 
 *      또한 이는 각 각 (T, F), (F, T) (F, F) 케이스로 이어진다.
 * 
 *      + 추가) 이는 가능 -> 가능으로 이동이지만 색이 추가됨에 따라 불가능한 표현이 가능해질 수 있다.
 * 
 *      (T, T) 에서 F 를 삽입해서 잘못된 표현이 잡히는 경우.
 * 
 *      (F, F) 에서 T 를 삽입해서 갯수가 안 맞던 케이스가 잡히는 경우.
 * 
 *      오버플로우 가능성이 있으므로 long long 으로 풀자.
 * 
 * 
 * -------------------------------------------------------------------------------------------------------------------------------
 * 
 *      색상환 N 개를 직선으로 펼칠 떄 K 개를 선택하는 방법은
 * 
 *      마지막 색이 선택됨 -> N - 2 개에서 K - 1 선택.
 * 
 *      마지막 색이 선택 안됨 -> N - 1 개에서 K 선택.
 * 
 *      이다. 마지막 색이 선택된 경우는 첫번쨰 색도 선택되었을 경우가 포함되있으므로
 * 
 *      T F X X ..... X X F T 인 경우를 배제해주면 된다.
 * 
 *      -> 마지막 색이 선택된 경우에서 N - 1 개에서 K - 1 을 선택했다면 배제해야겠지만,
 * 
 *         N - 2 에서 K - 1 을 선택하는 것을 이어받는 것은 FT 블록을 추가로 넣는 것과 같으므로 배제가 필요없다.
 * 
 * Comments
 *      복잡하게 생각해서 많은 조건과 복잡한 코드가 되버렸다.
 * 
 *      원형이라는 점에 매몰되서 문제를 단순화하지 못했다.
 * 
 *      결국은 F 혹은 FT 블록을 선형으로 조립해 N 개를 구성할 떄 K 개의 T 가 들어가는 수만 구하는 것으로 단순화 가능하다..!
 */

#define MAX_COLOR 1000
#define PRIME_NUMBER 1000000003

long long number_of_cases[MAX_COLOR + 1][MAX_COLOR / 2 + 1];

int main(void)
{
    int n, k;
    
    scanf("%d %d", &n, &k);

    if (k > n / 2) {
        printf("0\n");
        return 0;
    }

    for (int i = 2; i <= n; i++) {
        number_of_cases[i][1] = i;
    }

    for (int i = 4; i <= n; i++) {
        for (int j = 2; j <= k; j++) {
            number_of_cases[i][j] = (number_of_cases[i - 2][j - 1] + number_of_cases[i - 1][j]) % PRIME_NUMBER;
        }
    }
    printf("%lld\n", number_of_cases[n][k]);
}